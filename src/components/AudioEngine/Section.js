import Tone from 'tone';
import { differenceWith, cloneDeep, isEqual } from 'lodash';

window.t = Tone.Transport;

class Section {
    constructor(id, start) {
        // Uses an instance of Tone.Part internally.
        this._part = new Tone.Part();
        // A store for holding key/value paris for any notes currently in this section, where the
        // notes id is the key and an object holding the notes data is the value.
        this.noteStore = {};
        this._id = id;
        this._instrument = new Tone.PolySynth(12, Tone.Synth);
        this._start = start || "0:0:0";
        // set the start value of the internal Part instance to the start value of this Section instance.
        this._part.start(this._start);
        // Set the callback that the Part instance will use.
        this._part.callback = this._partCallback.bind(this);
    }

    /**
     * Reconciles the notes for this section.
     * @param {array} prevState - the previous state
     * @param {array} currState - the current state
     */
    reconcile(prevState=[], currState) {
        const prev = cloneDeep(prevState);
        const curr = cloneDeep(currState);
        // return early if nothing has changed
        if (isEqual(prev, curr)) {
            return this;
        }
        // notes that are in prev but not curr are marked as notesToRemove
        const notesToRemove = differenceWith(prev, curr, (a, b) => a._id === b._id);
        // notes that are in curr but not prev are marked as notesToAdd
        const notesToAdd = differenceWith(curr, prev, (a, b) => a._id === b._id);

        // remove the notesToRemove
        notesToRemove.forEach(noteData => this.removeNote(noteData._id));

        // add the notesToAdd
        notesToAdd.forEach(noteData => {
            this.addNote({
                note: noteData.pitch,
                time: noteData.time,
                duration: noteData.duration,
                id: noteData._id,
                velocity: noteData.velocity
            });
        });

        return this;
    }

    /**
     * Simple getter method for the start property
     */
    get start() {
        return this._start;
    }

    /**
     * Updates the start property for this section, as well as updating the start of the internal
     * Part instance.
     * @param {string} newStartValue - the new start value, a BBS formatted string. 
     */
    set start(newStartValue) {
        this._start = newStartValue;
        this._part.start(this._start);
    }

    /**
     * A simple getter method for this sections instrument.
     */
    get instrument() {
        return this._instrument;
    }

    /**
     * A simple setter method for this channels instrument.
     * @param {object} - the new instrument instance to update to.
     */
    set instrument(instrument) {
        this._instrument = instrument;
    }

    /**
     * The part callback that will be given to the internal Part instance. 
     * @param {number} time - the time value generated by the Tone library. 
     * @param {object} value - an object holding the note (pitch), duration and velocity to use.
     */
    _partCallback(time, value) {
        this.instrument.triggerAttackRelease(value.note, value.duration, time, value.velocity);
    }

    /**
     * Add a new note to the section. Adds it to the internal Part instance, and then adds a reference to the
     * note into the noteStore.
     * @param {object} noteData - an object holding the data for the new note to add. 
     */
    addNote(noteData) {
        this._part.add(noteData);
        this.noteStore[noteData.id] = noteData;
    }

    /**
     * Remove a note from this section. Removes it from the internal Part instance and removes it from the
     * noteStore.
     * @param {string} noteId - the id of the note to remove. 
     */
    removeNote(noteId) {
        const noteRef = this.noteStore[noteId];
        if (noteRef) {
            this._part.remove(noteRef.time, noteRef);
            delete this.noteStore[noteId];
        } 
    }

    /**
     * Calls dispose on the internal Part instance.
     */
    delete() {
        this._part.dispose();
    }

}

export default Section;
